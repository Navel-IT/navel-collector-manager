#!/usr/bin/env perl
# Copyright 2015 Navel-IT
# Navel Scheduler is developped by Yoann Le Garff, Nicolas Boquet and Yann Le Bras under GNU GPL v3

#-> BEGIN

#-> initialization

use 5.10.1;

use lib '/usr/local/share/navel-scheduler/lib';

use Getopt::Long qw/
    Configure
    GetOptions
/;

use Proc::Daemon;

use Cwd;

use Mojolicious::Lite;

use Mojo::Server::Daemon;

use Navel::Logger;

use Navel::Scheduler qw/
    $VERSION
/;

use Navel::Definition::WebService::Etc::Parser;

#-> defaults

my (
    $general_configuration_file_path,
    $log_file_path,
    $disable_rest,
    $daemonize,
    $mojo_server
);

my $pid_dir = '/var/run';

#-> functions

sub get_help() {
    return <<EOF;

        -h, --help    show help
        -v, --version    show version

        -c, --general-configuration-file-path <F>    load general configuration from <F>
        [-l, --log-file-path <F>]   log informations in file <F>
        [-n, --no-rest]   disable the REST api

        [-d, --daemonize]   run as a standalone daemon (only work on Unix-like systems)
EOF
}

#-> main

Configure('bundling');

GetOptions(
    'h|help' => sub {
        print get_help();

        exit 0;
    },
    'v|version' => sub {
        print $VERSION . "\n";

        exit 0;
    },
    'c|general-configuration-file-path=s' => \$general_configuration_file_path,
    'l|log-file-path=s' => \$log_file_path,
    'n|no-rest' => \$disable_rest,
    'd|daemonize' => \$daemonize

) || die $!;

if (defined $general_configuration_file_path) {
    my $logger = Navel::Logger->new($log_file_path);

    my $scheduler = eval {
        Navel::Scheduler->new($general_configuration_file_path);
    };

    unless ($@) {
        unless ($disable_rest) {
            my $web_services_listeners = Navel::Definition::WebService::Etc::Parser->new();

            my $return = $web_services_listeners->load($scheduler->get_configuration()->get_definition()->{definitions_path}->{webservices});

            if ($return->[0]) {
                my $return = $web_services_listeners->make();

                if ($return->[0]) {
                    app()->mode('production');

                    app()->log()->level('fatal');

                    under sub {
                        my $controller = shift;

                        my $userinfo = $controller->req()->url()->to_abs()->userinfo();

                        if (defined $userinfo && $userinfo eq $scheduler->get_configuration()->get_definition()->{webservices}->{login} . ':' . $scheduler->get_configuration()->get_definition()->{webservices}->{password}) {
                            return 1;
                        } else {
                            $controller->res()->headers()->www_authenticate('Basic');

                            $controller->render(
                                json => {
                                    error_message => 'Unauthorized : Access is denied due to invalid credentials'
                                },
                                status => 401
                            );

                            return undef;
                        }
                    };

                    get '/scheduler/api' => {
                        json => {
                            version => $VERSION
                        }
                    };

                    get '/scheduler/api/general' => sub {
                        shift->render(
                            json => $scheduler->get_configuration()->get_definition()
                        );
                    };

                    get '/scheduler/api/jobs' => sub {
                        shift->render(
                            json => {
                                jobs_count => scalar keys %{$scheduler->get_core()->get_cron()->jobs()}
                            }
                        );
                    };

                    get '/scheduler/api/connectors' => sub {
                        shift->render(
                            json => $scheduler->get_core()->get_connectors()->get_names()
                        );
                    };

                    get '/scheduler/api/connectors/(:connector)' => sub {
                        my $controller = shift;

                        $controller->render(
                            json => $scheduler->get_core()->get_connectors()->get_properties_by_name($controller->param('connector')) || {}
                        );
                    };

                    get '/scheduler/api/rabbitmq' => sub {
                        shift->render(
                            json => $scheduler->get_core()->get_rabbitmq()->get_names()
                        );
                    };

                    get '/scheduler/api/rabbitmq/(:rabbitmq)' => sub {
                        my $controller = shift;

                        $controller->render(
                            json => $scheduler->get_core()->get_rabbitmq()->get_properties_by_name($controller->param('rabbitmq')) || {}
                        );
                    };

                    get '/scheduler/api/webservices' => {
                        json => $web_services_listeners->get_names()
                    };

                    get '/scheduler/api/webservices/(:webservice)' => sub {
                        my $controller = shift;

                        $controller->render(
                            json => $web_services_listeners->get_properties_by_name($controller->param('webservice')) || {}
                        );
                    };

                    $mojo_server = Mojo::Server::Daemon->new(
                        app => app(),
                        listen => $web_services_listeners->get_urls()
                    );
                }
            }

            $logger->push_to_buffer($return->[1] . '.')->flush_buffer(1) unless ($return->[0]);
        }

        if ($daemonize) {
            Proc::Daemon->new(
                working_directory => getcwd(),
                pid_file => $pid_dir . '/navel-scheduler.pid',
                dont_close_fh => $logger->is_filehandler_via_lib() ? [__PACKAGE__ . '::DATA', $logger->get_filehandler()] : [__PACKAGE__ . '::DATA']
            )->Init();
        }

        eval {
            $mojo_server->silent(1)->start() unless ($disable_rest);
        };

        $logger->push_to_buffer($@ . '.')->flush_buffer(1) if ($@);

        eval {
            $scheduler->run($logger);
        };

        if ($@) {
            $logger->push_to_buffer($@ . '.')->flush_buffer();

            exit 1;
        }
    } else {
        $logger->push_to_buffer($@ . '.')->flush_buffer();

        exit 1;
    }
} else {
    print get_help() . "\n";

    exit 1;
}

exit 0;

#-> POD

=pod

=head1 NAME

navel-scheduler

=head1 SYNOPSIS

Control and run Navel::Scheduler

=head1 USAGE

navel-scheduler -h

=head1 AUTHOR

Yoann Le Garff, Nicolas Boquet and Yann Le Bras

=head1 LICENSE

GNU GPL v3

=cut

#-> TPL + END

__DATA__

@@ favicon.ico (base64)
AAABAAEAEBAAAAAAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAA
AAAAAACAgID/gICA/4CAgP+AgID/gICA/4CAgP+AgID/gICA/4CAgP+AgID/gICA/4CAgP+AgID/
gICA/4CAgP+AgID/gICA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8A
AAD/AAAA/wAAAP8AAAD/gICA/4CAgP8AAAD/////////////////////////////////////////
////////////////////////AAAA/4CAgP+AgID/AAAA////////////////////////////////
/////////////////////////////////wAAAP+AgID/gICA/wAAAP///////////wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD///////////8AAAD/gICA/4CAgP8AAAD///////////8A
AAD/////////////////////////////////AAAA////////////AAAA/4CAgP+AgID/AAAA////
////////AAAA/////////////////////////////////wAAAP///////////wAAAP+AgID/gICA
/wAAAP///////////wAAAP///////////wAAAP8AAAD///////////8AAAD///////////8AAAD/
gICA/4CAgP8AAAD///////////8AAAD///////////8AAAD/AAAA////////////AAAA////////
////AAAA/4CAgP+AgID/AAAA////////////AAAA//////8AAAD///////////8AAAD//////wAA
AP///////////wAAAP+AgID/gICA/wAAAP///////////wAAAP8AAAD/////////////////////
/wAAAP8AAAD///////////8AAAD/gICA/4CAgP8AAAD///////////8AAAD/AAAA/wAAAP8AAAD/
AAAA/wAAAP8AAAD/AAAA////////////AAAA/4CAgP+AgID/AAAA////////////////////////
//////////////////////////////8AAAD//////wAAAP+AgID/gICA/wAAAP//////////////
/////////////////////////////////////////////wAAAP8AAAD/gICA/4CAgP8AAAD/AAAA
/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/4CAgP+AgID/
gICA/4CAgP+AgID/gICA/4CAgP+AgID/gICA/4CAgP+AgID/gICA/4CAgP+AgID/gICA/4CAgP+A
gID/AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA
//8AAP//AAD//w==

@@ not_found.html.ep
<!DOCTYPE html>
<html>
    <head><title>Page not found</title></head>
    <body>Page not found</body>
</html>
