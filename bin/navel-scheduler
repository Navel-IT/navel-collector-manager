#!/usr/bin/env perl
# Copyright 2015 Navel-IT
# navel-scheduler is developed by Yoann Le Garff, Nicolas Boquet and Yann Le Bras under GNU GPL v3

#-> BEGIN

#-> initialization

use Navel::Base;

use Getopt::Long::Descriptive;

use Cwd;

use Navel::Logger;
use Navel::Scheduler;
use Navel::Utils qw/
    blessed
    daemonize
/;

#-> vars

my (
    $options,
    $usage,
    $logger
);

#-> sigtrap

use sigtrap (
    handler => sub {
        $logger->notice(
            $logger->stepped_log('catch a signal.',
                [
                    $!
                ]
            )
        )->flush_queue() if blessed($logger) eq 'Navel::Logger';

        exit 0;
    },
    'normal-signals'
);

#-> functions

sub usage($) {
    print $usage->text();

    exit shift;
}

#-> main

($options, $usage) = describe_options(
    'navel-scheduler %o <main-configuration-file-path>',
    [
        'log-file-path=s',
        'log output to a file'
    ],
    [
        'log-severity=s',
        'set severity (syslog format)',
        {
            default => 'notice'
        }
    ],
    [
        'log-no-color',
        'disable colored output'
    ],
    [
        'log-datetime-format=s',
        'set datetime format',
        {
            default => '%Y-%m-%d %H-%M-%S %z'
        }
    ],
    [],
    [
        'validate-configuration',
        'validate the configuration and exit with the proper code'
    ],
    [],
    [
        'no-web-services',
        'disable the web services'
    ],
    [],
    [
        'pid-file=s',
        'write pid to a file'
    ],
    [
        'daemonize',
        'run as a standalone daemon'
    ],
    [],
    [
        'version',
        'print version'
    ],
    [
        'help',
        'print help'
    ]
);

usage(0) if $options->help();

if ($options->version()) {
    say Navel::Scheduler->VERSION();

    exit 0;
}

my $main_configuration_file_path = shift @ARGV;

usage(1) unless defined $main_configuration_file_path;

$logger = eval {
    Navel::Logger->new(
        service => 'navel-scheduler',
        severity => $options->log_severity(),
        file_path => $options->log_file_path(),
        colored => ! $options->log_no_color(),
        datetime_format => $options->log_datetime_format()
    );
};

usage(1) unless defined $logger;

if ($options->daemonize() && ! $options->validate_configuration()) {
    $logger->info('daemonizing.')->flush_queue();

    eval {
        daemonize(
            work_dir => cwd(),
            pid_file => $options->pid_file()
        );
    };

    unless ($@) {
        $logger->{service_pid} = $$;

        $logger->info('daemon successfully started.')->flush_queue();
    } else {
        $logger->emerg(
            $logger->stepped_log('error while daemonizing.',
                [
                    $@
                ]
            )
        )->flush_queue();

        exit 1;
    }
}

my $scheduler = eval {
    Navel::Scheduler->new(
        main_configuration_file_path => $main_configuration_file_path
    )->prepare(
        logger => $logger,
        enable_webservices => ! $options->no_web_services() && ! $options->validate_configuration()
    );
};

if ($@) {
    $logger->emerg($logger->stepped_log($@))->flush_queue();

    exit 1;
}

if ($options->validate_configuration()) {
    $logger->notice('configuration is valid.')->flush_queue();

    exit 0;
}

$logger->notice('initialization.')->flush_queue();

eval {
    $scheduler->start();
};

if ($@) {
    $logger->emerg($logger->stepped_log($@))->flush_queue();

    exit 1;
}

#-> END

__END__

=pod

=encoding utf8

=head1 NAME

navel-scheduler - Control and run Navel::Scheduler

=back

=head1 DESCRIPTION

navel-scheduler's purpose is to get back datas from collectors at scheduled time then encode and push it through RabbbitMQ to navel-storer.

=head1 AUTHOR

Yoann Le Garff, Nicolas Boquet and Yann Le Bras

=head1 LICENSE

GNU GPL v3

=cut
