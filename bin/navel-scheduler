#!/usr/bin/env perl
# Copyright 2015 Navel-IT
# navel-scheduler is developed by Yoann Le Garff, Nicolas Boquet and Yann Le Bras under GNU GPL v3

#-> BEGIN

#-> initialization

use strict;
use warnings;

use feature 'say';

use File::Basename;

use Getopt::Long;
use Pod::Usage;

use Proc::Daemon;

use Cwd;

use Navel::Logger;
use Navel::Scheduler '$VERSION';

#-> defaults

my (
    $log_file_path,
    $log_no_color,
    $daemonize,
    $validate_configuration,
    $disable_web_services,
    $logger,
    $scheduler
);

my $log_severity = 'notice';

my $log_datetime_format = '%s';

my $pid_file = '/var/run/navel-scheduler/' . basename(__FILE__) . '.pid';

#-> main

my $getopts = Getopt::Long::Parser->new();

$getopts->configure('bundling');

$getopts->getoptions(
    'log-file-path=s' => \$log_file_path,
    'log-severity=s' => \$log_severity,
    'log-no-color' => \$log_no_color,
    'log-datetime-format=s' => \$log_datetime_format,
    'daemonize' => \$daemonize,
    'pid-file=s' => \$pid_file,
    'validate-configuration' => \$validate_configuration,
    'no-web-services' => \$disable_web_services,
    'help' => sub {
        pod2usage(0);
    },
    'version' => sub {
        say $VERSION;

        exit 0;
    }
) || pod2usage(1);

defined (my $main_configuration_file_path = shift @ARGV) or pod2usage(1);

eval {
    $logger = Navel::Logger->new(
        severity => $log_severity,
        file_path => $log_file_path,
        colored => ! $log_no_color,
        datetime_format => $log_datetime_format
    );
};

pod2usage(1) unless defined $logger;

if ($daemonize && ! $validate_configuration) {
    $logger->info('daemonizing.')->flush_queue();

    eval {
        Proc::Daemon->new(
            working_directory => getcwd(),
            pid_file => $pid_file
        )->Init();
    };

    unless ($@) {
        $logger->info('daemon successfully started.');
    } else {
        $logger->emerg(
            $logger->stepped_log('error while daemonizing.',
                [
                    $@
                ]
            )
        )->flush_queue();

        exit 1;
    }
}

$scheduler = eval {
    Navel::Scheduler->new(
        main_configuration_file_path => $main_configuration_file_path
    )->prepare(
        logger => $logger,
        enable_webservices => ! $disable_web_services
    );
};

if ($@) {
    $logger->emerg($logger->stepped_log($@))->flush_queue();

    exit 1;
}

if ($validate_configuration) {
    $logger->notice('configuration is valid.')->flush_queue();

    exit 0;
}

$logger->notice('starting the scheduler.')->flush_queue();

eval {
    $scheduler->run();
};

if ($@) {
    $logger->emerg($logger->stepped_log($@))->flush_queue();

    exit 1;
}

#-> END

__END__

=pod

=head1 NAME

navel-scheduler - Control and run Navel::Scheduler

=head1 SYNOPSIS

navel-scheduler [<options>] <main-configuration-file-path>

=head1 OPTIONS

=over 4

=item B<--log-file-path=<FILE>>

Log output to FILE.

=item B<--log-severity=<SEVERITY>>

Set severity (syslog format) to SEVERITY.

=item B<--log-no-color>

Disable colored log output.

=item B<--log-datetime-format=<FORMAT>>

Display datetime in the given FORMAT.

=item B<--daemonize>

Run as a standalone daemon.

=item B<--pid-file=<FILE>>

Write pid to FILE.

=item B<--validate-configuration>

Validate the configuration and exit with the proper code.

=item B<--no-web-services>

Disable the web services.

=item B<--help>

Print help.

=item B<--version>

Print version.

=back

=head1 DESCRIPTION

navel-scheduler's purpose is to get back datas from collectors at scheduled time then encode and push it through RabbbitMQ to navel-storer.

=head1 AUTHOR

Yoann Le Garff, Nicolas Boquet and Yann Le Bras

=head1 LICENSE

GNU GPL v3

=cut
